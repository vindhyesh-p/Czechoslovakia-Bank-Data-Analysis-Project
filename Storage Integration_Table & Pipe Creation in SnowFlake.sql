

CREATE DATABASE BANK_DATA;

USE SCHEMA BANK_DATA.PUBLIC;

***************************************************************************************************************
#### CREATING ALL THE 8 TABLES #### 
***************************************************************************************************************

CREATE OR REPLACE TABLE DISTRICT
(
District_code INT PRIMARY KEY,
District_name VARCHAR(100),
Region VARCHAR(100),
No_of_inhabitants INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999 INT,
No_of_municipalities_with_inhabitants_2000_btw_9999 INT,
No_of_municipalities_with_inhabitants_greater_10000 INT,
No_of_cities INT,
Ratio_of_urban_inhabitants FLOAT,
Average_salary INT,
No_of_entrepreneurs_per_1000_inhabitants INT,
No_committed_crime_2017 INT,
No_committed_crime_2018 INT
);


CREATE OR REPLACE TABLE ACCOUNT
(
account_id INT PRIMARY KEY,
district_id INT,
frequency VARCHAR(40),
date DATE,
Account_type VARCHAR(100),
Card_Assigned VARCHAR(20),
FOREIGN KEY(district_id) REFERENCES DISTRICT(District_code)
);


CREATE OR REPLACE TABLE `ORDER`
(
order_id INT PRIMARY KEY,
account_id INT,
Bank_to VARCHAR(45),
account_to INT,
amount FLOAT,
FOREIGN KEY(account_id) REFERENCES ACCOUNT(account_id)
);


CREATE OR REPLACE TABLE LOAN
(
loan_id INT,
account_id INT,
`date` DATE,
amount INT,
duration INT,
payments INT,
`status` VARCHAR(30),
FOREIGN KEY(account_id) REFERENCES ACCOUNT(account_id)
);


CREATE OR REPLACE TABLE TRANSACTIONS
(
trans_id INT,
account_id INT,
`Date` DATE,
Type VARCHAR(30),
operation VARCHAR(40),
amount INT,
balance FLOAT,
Purpose VARCHAR(40),
bank VARCHAR(45),
account_partern_id INT,
FOREIGN KEY(account_id) REFERENCES ACCOUNT(account_id)
);


CREATE OR REPLACE TABLE CLIENT
(
client_id INT PRIMARY KEY,
Sex VARCHAR(10),
Birth_date DATE,
district_id INT,
FOREIGN KEY(district_id) REFERENCES DISTRICT(District_code)
);


CREATE OR REPLACE TABLE DISPOSITION
(
disp_id INT PRIMARY KEY,
client_id INT,
account_id INT,
type CHAR(15),
FOREIGN KEY(client_id) REFERENCES CLIENT(client_id),
FOREIGN KEY(account_id) REFERENCES ACCOUNT(account_id)
);


CREATE OR REPLACE TABLE CARD
(
card_id INT PRIMARY KEY,
disp_id INT,
type VARCHAR(10),
issued DATE,
FOREIGN KEY(disp_id) REFERENCES DISPOSITION(disp_id)
);

***************************************************************************************************************
#### STORAGE INTEGRATION #### 
***************************************************************************************************************

CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::158008061280:role/czech_bank_role'
STORAGE_ALLOWED_LOCATIONS = ('s3://czechbankdata-vkp/');

DESC integration s3_int;

CREATE OR REPLACE STAGE BANK
URL = 's3://czechbankdata-vkp'
file_format=MYCSVFORMAT
storage_integration = s3_int;


LIST @BANK;

SHOW STAGES


**************************************************************************************************************************************
#####CREATE SNOWPIPE THAT RECOGNISES CSV THAT ARE INGESTED FROM EXTERNAL STAGE AND COPIES THE DATA INTO EXISTING TABLE##### 
**************************************************************************************************************************************

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT AUTO_INGEST = TRUE AS
COPY INTO "BANK_DATA"."PUBLIC"."DISTRICT"
FROM '@BANK/District/'
FILE_FORMAT = MYCSVFORMAT;


CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT AUTO_INGEST = TRUE AS
COPY INTO "BANK_DATA"."PUBLIC"."ACCOUNT"
FROM '@BANK/Account/'
FILE_FORMAT = MYCSVFORMAT;


CREATE OR REPLACE PIPE BANK_SNOWPIPE_TXNS AUTO_INGEST = TRUE AS
COPY INTO "BANK_DATA"."PUBLIC"."TRANSACTIONS"
FROM '@BANK/Trnx/'
FILE_FORMAT = MYCSVFORMAT;


CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISP AUTO_INGEST = TRUE AS
COPY INTO "BANK_DATA"."PUBLIC"."DISPOSITION"
FROM '@BANK/Disp/'
FILE_FORMAT = MYCSVFORMAT;


CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD AUTO_INGEST = TRUE AS
COPY INTO "BANK_DATA"."PUBLIC"."CARD"
FROM '@BANK/Card/'
FILE_FORMAT = MYCSVFORMAT;


CREATE OR REPLACE PIPE BANK_SNOWPIPE_ORDER AUTO_INGEST = TRUE AS
COPY INTO "BANK_DATA"."PUBLIC"."`ORDER`"
FROM '@BANK/Order/'
FILE_FORMAT = MYCSVFORMAT;


CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN AUTO_INGEST = TRUE AS
COPY INTO "BANK_DATA"."PUBLIC"."LOAN"
FROM '@BANK/Loan/'
FILE_FORMAT = MYCSVFORMAT;


CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENT AUTO_INGEST = TRUE AS
COPY INTO "BANK_DATA"."PUBLIC"."CLIENT"
FROM '@BANK/Client/'
FILE_FORMAT = MYCSVFORMAT;


SHOW PIPES;

SELECT count(*) FROM DISTRICT;
SELECT count(*) FROM ACCOUNT;
SELECT count(*) FROM TRANSACTIONS;
SELECT count(*) FROM DISPOSITION;
SELECT count(*) FROM CARD;
SELECT count(*) FROM `ORDER`;
SELECT count(*) FROM LOAN;
SELECT count(*) FROM CLIENT;


ALTER PIPE BANK_SNOWPIPE_DISTRICT refresh;
ALTER PIPE BANK_SNOWPIPE_ACCOUNT refresh;
ALTER PIPE BANK_SNOWPIPE_TXNS refresh;
ALTER PIPE BANK_SNOWPIPE_DISP refresh;
ALTER PIPE BANK_SNOWPIPE_CARD refresh;
ALTER PIPE BANK_SNOWPIPE_ORDER refresh;
ALTER PIPE BANK_SNOWPIPE_LOAN refresh;
ALTER PIPE BANK_SNOWPIPE_CLIENT refresh;


SELECT * FROM DISTRICT;
SELECT * FROM ACCOUNT;
SELECT * FROM TRANSACTIONS;
SELECT * FROM DISPOSITION;
SELECT * FROM CARD;
SELECT * FROM `ORDER`;
SELECT * FROM LOAN;
SELECT * FROM CLIENT;




CREATE DATABASE BANK
USE DATABASE BANK

CREATE OR REPLACE TABLE DISTRICT
(
District_code INT PRIMARY KEY,
District_name VARCHAR(100),
Region VARCHAR(100),
No_of_inhabitants INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999 INT,
No_of_municipalities_with_inhabitants_2000_btw_9999 INT,
No_of_municipalities_with_inhabitants_greater_10000 INT,
No_of_cities INT,
Ratio_of_urban_inhabitants FLOAT,
Average_salary INT,
No_of_entrepreneurs_per_1000_inhabitants INT,
No_committed_crime_2017 INT,
No_committed_crime_2018 INT
);



CREATE OR REPLACE TABLE ACCOUNT
(
account_id INT PRIMARY KEY,
district_id INT,
frequency VARCHAR(40),
date DATE,
Account_type CHAR(100),
Card_Assigned VARCHAR(20),
FOREIGN KEY(district_id) REFERENCES DISTRICT(District_code)
);



CREATE OR REPLACE TABLE `ORDER`
(
order_id INT PRIMARY KEY,
account_id INT,
Bank_to VARCHAR(45),
account_to INT,
amount FLOAT,
FOREIGN KEY(account_id) REFERENCES ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE LOAN
(
loan_id INT,
account_id INT,
`date` DATE,
amount INT,
duration INT,
payments INT,
`status` VARCHAR(30),
FOREIGN KEY(account_id) REFERENCES ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE TRANSACTIONS
(
trans_id INT,
account_id INT,
`Date` DATE,
Type VARCHAR(30),
operation VARCHAR(40),
amount INT,
balance FLOAT,
Purpose VARCHAR(40),
bank VARCHAR(45),
account_partern_id INT,
FOREIGN KEY(account_id) REFERENCES ACCOUNT(account_id)
);


CREATE OR REPLACE TABLE TRANSACTIONS111
(
trans_id INT,
account_id INT,
`Date` DATE,
Type VARCHAR(30),
operation VARCHAR(40),
amount INT,
balance FLOAT,
Purpose VARCHAR(40),
bank VARCHAR(45),
account_partern_id INT,
FOREIGN KEY(account_id) REFERENCES ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE CLIENT
(
client_id INT PRIMARY KEY,
Sex VARCHAR(10),
Birth_date DATE,
district_id INT,
FOREIGN KEY(district_id) REFERENCES DISTRICT(District_code)
);



CREATE OR REPLACE TABLE DISPOSITION
(
disp_id INT PRIMARY KEY,
client_id INT,
account_id INT,
type CHAR(15),
FOREIGN KEY(client_id) REFERENCES CLIENT(client_id),
FOREIGN KEY(account_id) REFERENCES ACCOUNT(account_id)
);



CREATE OR REPLACE TABLE CARD
(
card_id INT PRIMARY KEY,
disp_id INT,
type VARCHAR(10),
issued DATE,
FOREIGN KEY(disp_id) REFERENCES DISPOSITION(disp_id)
);


SELECT * FROM DISTRICT;
SELECT * FROM ACCOUNT;
SELECT * FROM TRANSACTIONS;
SELECT * FROM DISPOSITION;
SELECT * FROM CARD;
SELECT * FROM `ORDER`;
SELECT * FROM LOAN;
SELECT * FROM CLIENT;


SELECT (YEAR(BIRTH_DATE)) FROM CLIENT;
SELECT *,((YEAR(TO_DATE('2022-12-31'))) - (YEAR(BIRTH_DATE))) AS AGE FROM CLIENT;


*************************************************************************************
ADDING AGE COLUMN IN CLIENT TABLE
**************************************************************************************

ALTER TABLE CLIENT
ADD COLUMN AGE INT;

UPDATE CLIENT
SET AGE = DATEDIFF('YEAR',BIRTH_DATE,'2022-12-31');

SELECT 
SUM(CASE WHEN SEX = 'Male' THEN 1 END) AS MALE_COUNT,
SUM(CASE WHEN SEX = 'Female' THEN 1 END) AS FEMALE_COUNT
FROM CLIENT


DROP TABLE TRANSACTIONS;

SELECT COUNT(*) FROM BANK.PUBLIC.TRANSACTIONS
SELECT COUNT(*) FROM BANK.PUBLIC.TRANSACTIONS111


INSERT INTO TRANSACTIONS(trans_id,account_id,`Date`,Type,operation,amount,balance,Purpose,bank,account_partern_id)
SELECT trans_id, account_id, `Date`, Type, operation, amount, balance, Purpose, bank, account_partern_id
FROM TRANSACTIONS111;

DROP TABLE TRANSACTIONS111

SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(`DATE`) = '2016';

SELECT YEAR(`DATE`) AS TXN_YEAR , COUNT(*) AS TOT_TXNS
FROM TRANSACTIONS
WHERE BANK IS NULL
GROUP BY 1
ORDER BY 1;

SELECT COUNT(*) FROM TRANSACTIONS


SELECT *,
CASE
    WHEN YEAR(`DATE`) IN ('2016','2017','2018') THEN DATEADD(YEAR,2,`DATE`)
    WHEN YEAR(`DATE`) IN ('2020','2021') THEN DATEADD(YEAR,1,`DATE`)
END AS DATE_NEW
FROM TRANSACTIONS;


SELECT YEAR(`DATE`),COUNT(*) AS TOTAL FROM TRANSACTIONS
GROUP BY 1
ORDER BY 1 DESC;


UPDATE TRANSACTIONS
SET `DATE` = DATEADD(YEAR,1,`DATE`) WHERE YEAR(`DATE`) = '2016';

SELECT MIN(`DATE`), MAX(`DATE`) FROM TRANSACTIONS;



UPDATE TRANSACTIONS
SET BANK = 'SKY BANK' WHERE BANK IS NULL AND YEAR(`DATE`) = '2022';

UPDATE TRANSACTIONS
SET BANK = 'DBS BANK' WHERE BANK IS NULL AND YEAR(`DATE`) = '2021';

UPDATE TRANSACTIONS
SET BANK = 'NORTHERN BANK' WHERE BANK IS NULL AND YEAR(`DATE`) = '2019';

UPDATE TRANSACTIONS
SET BANK = 'SOUTHERN BANK' WHERE BANK IS NULL AND YEAR(`DATE`) = '2018';

UPDATE TRANSACTIONS
SET BANK = 'ADB BANK' WHERE BANK IS NULL AND YEAR(`DATE`) = '2017';


SELECT COUNT(*) FROM TRANSACTIONS;

SELECT * FROM CARD;

SELECT DISTINCT YEAR(ISSUED) FROM CARD;

SELECT * FROM ACCOUNT;

SELECT DISTINCT YEAR(DATE) FROM ACCOUNT;

CREATE OR REPLACE TABLE CZECH_DEMOGRAPHIC_DATA AS
SELECT C.DISTRICT_ID, D.DISTRICT_NAME, D.AVERAGE_SALARY, ROUND(AVG(C.AGE),0) AS AVG_AGE,
SUM(CASE WHEN C.SEX = 'Male' THEN 1 END) AS MALE_CLIENT,
SUM(CASE WHEN C.SEX = 'Female' THEN 1 END) AS FEMALE_CLIENT,
ROUND((FEMALE_CLIENT/MALE_CLIENT)*100,2) AS MALE_FEMALE_RATIO,
COUNT(*) AS TOTAL_CLIENT
FROM CLIENT AS C
INNER JOIN DISTRICT AS D 
ON C.DISTRICT_ID = D.DISTRICT_CODE
GROUP BY 1,2,3
ORDER BY 1;

SELECT * FROM CZECH_DEMOGRAPHIC_DATA;


CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE 
AS
SELECT LTD.*,TXN.BALANCE
FROM TRANSACTIONS AS TXN
INNER JOIN 
(
   SELECT ACCOUNT_ID,YEAR(`DATE`) AS TXN_YEAR,
   MONTH(`DATE`) AS TXN_MONTH,
   MAX(`DATE`) AS LATEST_TXN_DATE
   FROM TRANSACTIONS
   GROUP BY 1,2,3
   ORDER BY 1,2,3

) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.`DATE` = LTD.LATEST_TXN_DATE
WHERE TXN.TYPE = 'Credit'
ORDER BY TXN.ACCOUNT_ID,LTD.TXN_YEAR,LTD.TXN_MONTH;

select * from ACC_LATEST_TXNS_WITH_BALANCE;


CREATE OR REPLACE TABLE BANKING_KPI AS
SELECT  ALWB.TXN_YEAR , ALWB.TXN_MONTH,T.BANK,A.ACCOUNT_TYPE,

COUNT(DISTINCT ALWB.ACCOUNT_ID) AS TOT_ACCOUNT, 
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T.TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT ,
COUNT(CASE WHEN T.TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,

SUM(ALWB.BALANCE) AS TOT_BALANCE,

ROUND((DEPOSIT_COUNT / TOT_TXNS) * 100,2)  BANK.PUBLIC.CZECH_DEMOGRAPHIC_DATAAS DEPOSIT_PERC ,
ROUND((WITHDRAWAL_COUNT / TOT_TXNS) * 100,2) AS WITHDRAWAL_PERC ,
NVL(TOT_BALANCE / TOT_ACCOUNT,0) AS AVG_BALANCE,

ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA

FROM TRANSACTIONS AS T
INNER JOIN  ACC_LATEST_TXNS_WITH_BALANCE AS ALWB ON T.ACCOUNT_ID = ALWB.ACCOUNT_ID
LEFT OUTER JOIN  ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;


select * from BANKING_KPI;
